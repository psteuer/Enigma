package enigma;
//TODO define Nb and Nr both 4

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

/**
 *
 * @author tuf67096
 */
//This is the model(where work is done) for the MVC model
public class Cipher {

    private static String FinalEntext;
    private static String FinalDetext;
    public static final int Nb = 4;
    public static final int Nr = 10; //changed from 4
    //sbox is a 16x16 lookup table
    public static final int[][] sbox = {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76}, {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0}, {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15}, {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75}, {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84}, {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf}, {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8}, {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2}, {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73}, {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb}, {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79}, {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08}, {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a}, {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e}, {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf}, {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
    public static final int[][] invsbox = {{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb}, {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb}, {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e}, {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25}, {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92}, {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84}, {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06}, {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b}, {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73}, {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e}, {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b}, {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4}, {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f}, {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef}, {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61}, {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};
    public static final int[][] GF = {{0x02, 0x03, 0x01, 0x01}, {0x01, 0x02, 0x03, 0x01}, {0x01, 0x01, 0x02, 0x03}, {0x03, 0x01, 0x01, 0x02}};
    public static final int[][] invGF = {{0x0e, 0x0b, 0x0d, 0x09},{0x09, 0x0e, 0x0b, 0x0d}, {0x0d, 0x09, 0x0e, 0x0b}, {0x0b, 0x0d, 0x09, 0x0e}};

    public Cipher() {
        //NOTHING HERE
    }

    public int[][] decipher(int[][] in, int[][] keyin) {
        //Decryption Algorithm

        int[][] state = in;
        int[][] key = keyin;

        /*
        state = AddRoundKey(state, key);
        for (int round = 1; round < Nr; round++) {
            state = myInvShiftRows(state);
            state = invSubBytes(state);
            state = AddRoundKey(state, key);
            state = MixColumns(state);
        }
        myInvShiftRows(state);
        invSubBytes(state);
        AddRoundKey(state, key);
         */
        return state;
    }

    public int[][] Encipher(int[][] in, int[][] keyin) {
        int[][] state = in;
        int[][] key = keyin;

        //in is the input plain text
        //out is the output in cipher text
        //key is the expanded key of size 4*Nb*(Nb+1)
        // byte[][] state = new byte[4][Nb];  ///Nb will always be size 4
        // state = in; 
        //TESTS+++++++++++++++++++++++++++++++
        //int[][] subbytesAns = {{0x63, 0xEB, 0x9F, 0xA0}, {0xC0, 0x2F, 0x93, 0x92}, {0xAB, 0x30, 0xAF, 0xC7}, {0x20, 0xCB, 0x2B, 0xA2}};
        //subbytesAns = invSubBytes(subbytesAns);
        //System.out.println(Arrays.deepToString(subbytesAns));

        int[][] shiftLeftAns = {{0x63, 0xEB, 0x9F, 0xA0}, {0x2F, 0x93, 0x92, 0xC0}, {0xAF, 0xC7, 0xAB, 0x30}, {0xA2, 0x20, 0xCB, 0x2B}};
        int[][] MixOutput = {{0xBA,0x84,0xE8,0x1B},{0x75,0xA4,0x8D,0x40},{0xF4,0x8D,0x06,0x7D},{0x7A,0x32,0x0E,0x5D}};
        System.out.println(Arrays.deepToString(MixColumns(shiftLeftAns)));
        //++++++++++++++++++++++++++++++
        // state = AddRoundKey(state, word);
        for (int round = 1; round < Nr; round++) {
            // state =   SubBytes(state);
            //state = ShiftRows(state); 
            //state =  MixColumns(state);
            // state = AddRoundKey(state, word);
        }
        return state;
    }

    /*
    public int[][] mixcolumns(int[][] state){
        for(int r = 0; r < 4; r++){
            state[r][0] ^= ;
            state[r][1] ^=  ;
            state[r][2] ^= ;
            state[r][3] ^= ;
        }
     return state;   
    }
    */
    
     // <editor-fold defaultstate="collapsed" desc="My attempt">
    
    /*
    INPUT: int[][] state
    OUTPUT: int[][] state
    Performes linear transofrmation on state
     */
    public int[][] MixColumns(int[][] state){
        int[][] build = new int[4][4]; //create new array so we dont mess up state while using it
        for(int row = 0; row < 4; row++){
            for(int col = 0; col < 4; col++){
                for(int k = 0; k < 4; k++){
                    //XOR is addition in GF(2^8) and multiplication requires 
                    build[row][col] ^= GFmult(state[row][k],GF[k][row]); 
                }
            }
        }
        return build;
    }
    
    /*
    INPUT: s is number in state array, g is number in GF array
    OUTPUT: s*g but in GF(2^8) form
    Im am usng the "Russian Peasant Multiplication algorith" found on Wikipedia 
    */
    public int GFmult(int s, int g){
        int ans = 0;
        byte a = (byte)s;
        s = a & 0xFF;
        byte t = (byte)g;
        g = g & 0xFF;
        //Converts to unsigned int
        while(g != 0){
            if((g&1) != 0){
                ans ^=s;
            }if((s & 0x80) != 0){
                s = (s<<1)^ 0x11b;
            }else{
                s<<=1; 
            }
            g >>= 1;
        }
        return ans;
    }
    
    // </editor-fold> //delete this
    // <editor-fold defaultstate="collapsed" desc="SubBytes + invSubBytes">
    /*
    INPUT: int[][] state
    OUTPUT: int[][] state
    NOTES: each entry substitued with corrisponding s-box entry
    For instance: 0x6E is substituted by entry of s-box in row 6, column E
     */
    public int[][] SubBytes(int[][] state) {
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < Nb; col++) {
                //break state apart into 2 bytes, use each byte for row/column lookup
                int e = state[row][col] & 0x0F;  //works for E
                int c = (state[row][col] >> 4) & 0x0F; //works for 6?
                state[row][col] = sbox[c][e];
            }
        }
        return state;
    }

    /*
    INPUT: int[][] state
    OUTPUT: int[][] state
    NOTES: each entry substitued with corrisponding s-box entry
    For instance: 0x6E is substituted by entry of s-box in row 6, column E
     */
    public int[][] invSubBytes(int[][] state) {
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < Nb; col++) {
                //break state apart into 2 bytes, use each byte for row/column lookup
                int e = state[row][col] & 0x0F;  //works for E
                int c = (state[row][col] >> 4) & 0x0F; //works for 6
                state[row][col] = invsbox[c][e];
            }
        }

        return state;
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc=" AddRoundKey">
    /*
    INPUT: state & key
    OUTPUT: state
    This simply XOR's the state to the key
    This works for ecryption and decryption
    NOTE: XOR is the same as addition in Falois Field GF(2^8)
     */
    public int[][] AddRoundKey(int[][] state, int[][] key) {
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 4; col++) {
                //simple XOR each state int to corrisponding key int
                state[row][col] = state[row][col] ^ key[row][col];
            }
        }
        return state;
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="MyShiftRows+InvShiftRows">
    /*
    INPUT: 2D array state array
    OUTPUT: 2D State array
    Shifts rows 2,3,4 by offsets of 1,2,3 respectively
    Calls the shiftleft function
     */
    public int[][] myShiftRows(int[][] state) {
        for (int r = 1; r < 4; r++) { //skip the first row  
            System.arraycopy(shiftleft(state[r], r), 0, state[r], 0, 4);
        }
        return state;
    }

    /*
    INPUT: int[] array , int off 
    OUTPUT: array
    Takes 1D array and shifts the rows to the LEFT by int off
     */
    public int[] shiftleft(int[] row, int off) {
        int[] temp = new int[off];

        for (int i = 0; i < off; i++) {
            temp[i] = row[i];
        }
        System.arraycopy(row, off, row, 0, row.length - off);
        for (int a = 4 - off; a < 4; a++) {
            row[a] = temp[off + a - row.length];
        }
        return row;
    }

    /*
    INPUT: 2D array state array
    OUTPUT: 2D State array
    Shifts rows 2,3,4 by offsets of 1,2,3 respectively
    Calls the rightshift function
     */
    public int[][] myInvShiftRows(int[][] state) {
        for (int r = 1; r < 4; r++) {
            System.arraycopy(shiftRight(state[r], r), 0, state[r], 0, 4);
        }
        return state;
    }

    /*
    INPUT: int[] array , int off 
    OUTPUT: array
    Takes 1D array and shifts the rows to the Right by int off
     */
    public int[] shiftRight(int[] row, int off) {
        int[] temp = new int[off];

        for (int i = 0; i < off; i++) {
            temp[i] = row[i];
        }
        System.arraycopy(row, 0, row, off, row.length - off);
        for (int a = 0; a < off; a++) {
            row[a] = temp[a];
        }
        return row;
    }
// </editor-fold>
    //returns the output if 

    private void setencrypted(String entext) {
        this.FinalEntext = entext;
    }

    public String getencrypted() {
        return FinalEntext;
    }
}
